from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    BotCommand,
    BotCommandScopeDefault,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
import os
import sqlite3
import threading
from flask import Flask, render_template_string
from dotenv import load_dotenv

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
conn = sqlite3.connect('analytics.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS events (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    username TEXT,
    event TEXT,
    ts DATETIME DEFAULT CURRENT_TIMESTAMP
)
''')
conn.commit()

def log_event(user, event: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ –ë–î: user.id, user.username, —Å–æ–±—ã—Ç–∏–µ –∏ –≤—Ä–µ–º—è."""
    user_id = user.id
    username = user.username or f"{user.first_name} {user.last_name or ''}".strip()
    cursor.execute(
        "INSERT INTO events(user_id, username, event) VALUES (?, ?, ?)",
        (user_id, username, event)
    )
    conn.commit()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Telegram Bot: —Ç–µ–∫—Å—Ç—ã –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
FIRST_MESSAGE = '''üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PIRANIA!

–° 2015 –≥–æ–¥–∞ –º—ã —Å–æ–∑–¥–∞—ë–º —Å–∞–π—Ç—ã –∏ –ª–µ–Ω–¥–∏–Ω–≥–∏ –ø–æ–¥ –∫–ª—é—á –Ω–∞ Tilda, –ë–∏—Ç—Ä–∏–∫—Å, Wordpress –∏ –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö.

üì¶ –ß–µ–º –º–æ–∂–µ–º –ø–æ–º–æ—á—å:
‚Äî –û—Ü–µ–Ω–∏—Ç—å –í–∞—à –ø—Ä–æ–µ–∫—Ç –∏ —Å—Ä–æ–∫–∏  
‚Äî –ü—Ä–∏—Å–ª–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –Ω–∞—à–∏—Ö —Ä–∞–±–æ—Ç  
‚Äî –ü–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–æ—Ä–º–∞—Ç —Å–∞–π—Ç–∞

üì¢ –¢–∞–∫–∂–µ –∑–∞–Ω–∏–º–∞–µ–º—Å—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ–º:
‚Äî –Ø–Ω–¥–µ–∫—Å –î–∏—Ä–µ–∫—Ç  
‚Äî SEO  
‚Äî –†–µ–∫–ª–∞–º–∞ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö –∏ –¥—Ä—É–≥–∏–µ –∫–∞–Ω–∞–ª—ã

üé• –ú—ã ‚Äî –Ω–µ –ø—Ä–æ—Å—Ç–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ, –∞ –º–µ–¥–∏–π–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è, –∞–∫—Ç–∏–≤–Ω–æ –≤–µ–¥—ë–º —Å–æ—Ü—Å–µ—Ç–∏, –¥–µ–ª–∏–º—Å—è –∫–µ–π—Å–∞–º–∏ –∏ –ø–æ–ª–µ–∑–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º. –ù–∞—Å –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∑–¥–µ—Å—å:

üîó –°–∞–π—Ç—ã:
üåê https://ra-pirania.ru  
üåê https://pirania-ra.ru

üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã:
üë§ Telegram (–ª–∏—á–Ω—ã–π): @RA_PIRANIA  
üë• VK: https://vk.com/zhirnovgenri

üì∫ –ù–∞—à–∏ –º–µ–¥–∏–∞-–ø–ª–æ—â–∞–¥–∫–∏:
‚ñ∂Ô∏è YouTube: https://www.youtube.com/channel/UCMC4fr2Fz9uo2mqjjmAb9LA  
üìå Pinterest: https://ru.pinterest.com/ZhirnovGennady/  
üé¨ RuTube: https://rutube.ru/channel/30409260/  
üì∞ –î–∑–µ–Ω: https://dzen.ru/ra_pirania  
üé• VK –í–∏–¥–µ–æ: https://vkvideo.ru/@pirania_ra

üí¨ –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –í–∞–º –Ω—É–∂–Ω–æ ‚Äî –º—ã –Ω–∞ —Å–≤—è–∑–∏!'''

CASES_LIST = [
    "https://marinadevyatova.ru",
    "https://netievskiy.pro/",
    "https://gusinayalapka.ru",
    "https://cleanbox96.ru/",
    "https://grosko-realty.ru/",
    "https://svetron.pro/",
    "https://iqlabmoscow.ru/",
    "https://tkreka.ru/",
    "https://Katehunter.ru",
    "https://homecleaning.site/",
    "https://belka.team/",
    "https://semerukhinarealty.ru/",
    "https://elkamult.ru/",
    "https://mk-logic.ru",
    "https://usa-baby.us/",
    "https://gastromarketreka.ru/",
    "https://evabrick.ru",
    "https://rus-village.ru/",
    "https://vesnastom.ru/",
    "https://vbg-group.ru/",
    "https://yurchenko-vladimir.ru",
    "https://choosyrecruitment.com",
    "https://voskresenie.band",
    "https://comofissnab.ru",
]
CONTACT_LINK = "https://t.me/RA_PIRANIA"

def main_menu_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ö–µ–π—Å—ã", callback_data='cases'),
         InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è", callback_data='contact')]
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log_event(update.effective_user, 'start')
    await update.message.reply_text(FIRST_MESSAGE, reply_markup=main_menu_keyboard())

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    if query.data == 'cases':
        log_event(user, 'cases')
        text = "–°–ø–∏—Å–æ–∫ –∫–µ–π—Å–æ–≤:\n" + "\n".join(f"‚Äì {url}" for url in CASES_LIST)
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]])
        await query.edit_message_text(text, reply_markup=kb)
    elif query.data == 'contact':
        log_event(user, 'contact')
        text = f"–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π: {CONTACT_LINK}"
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]])
        await query.edit_message_text(text, reply_markup=kb)
    elif query.data == 'back':
        log_event(user, 'back')
        await query.edit_message_text(FIRST_MESSAGE, reply_markup=main_menu_keyboard())

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def getid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args or not context.args[0].startswith("@"):
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /getid @username")
    username = context.args[0]
    try:
        chat = await context.bot.get_chat(username)
        await update.message.reply_text(
            f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: `{chat.id}`",
            parse_mode="MarkdownV2"
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID: {e}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Flask Web Server –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
webapp = Flask(__name__)

HTML_TEMPLATE = '''
<!doctype html>
<html lang="ru">
<head>
  <meta charset="utf-8">
  <title>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ PIRANIA</title>
  <style>
    table {border-collapse: collapse; width: 100%;}
    th, td {border: 1px solid #ccc; padding: 8px; text-align: left;}
    th {background: #f4f4f4;}
  </style>
</head>
<body>
  <h1>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ PIRANIA</h1>
  <table>
    <tr><th>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</th><th>–°–æ–±—ã—Ç–∏–µ</th><th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th><th>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è</th></tr>
    {% for username, event, cnt, last in rows %}
    <tr><td>{{ username }}</td><td>{{ event }}</td><td>{{ cnt }}</td><td>{{ last }}</td></tr>
    {% endfor %}
  </table>
</body>
</html>
'''

@webapp.route('/')
def stats_page():
    cursor.execute(
        "SELECT username, event, COUNT(*) AS cnt, MAX(ts) AS last_ts"
        " FROM events GROUP BY username, event"
    )
    rows = cursor.fetchall()

    # ======== –ù–û–í–´–ô –ë–õ–û–ö –î–õ–Ø –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò –í–†–ï–ú–ï–ù–ò –í MSK ========
    from datetime import datetime
    from zoneinfo import ZoneInfo

    converted = []
    for username, event, cnt, last_ts in rows:
        # –ü–∞—Ä—Å–∏–º ISO-—Å—Ç—Ä–æ–∫—É –∏–∑ –ë–î
        dt = datetime.fromisoformat(last_ts)
        # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ UTC –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –ú–æ—Å–∫–≤—É (UTC+3)
        dt_utc = dt.replace(tzinfo=ZoneInfo('UTC'))
        dt_msk = dt_utc.astimezone(ZoneInfo('Europe/Moscow'))
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É
        formatted = dt_msk.strftime('%Y-%m-%d %H:%M:%S')
        converted.append((username, event, cnt, formatted))
    # ======================================================

    return render_template_string(HTML_TEMPLATE, rows=converted)

def run_web():
    webapp.run(host='0.0.0.0', port=5000)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –∏ –∑–∞–ø—É—Å–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def on_startup(application):
    # —Ç–æ–ª—å–∫–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã /start –∏ /getid
    await application.bot.set_my_commands(
        [
            BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand("getid", "–ü–æ–ª—É—á–∏—Ç—å ID –ø–æ @username"),
        ],
        scope=BotCommandScopeDefault(),
    )


def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
    threading.Thread(target=run_web, daemon=True).start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç
    app = ApplicationBuilder().token(TOKEN).post_init(on_startup).build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(CommandHandler('getid', getid))

    print("Bot is running...")
    app.run_polling()

if __name__ == '__main__':
    main()
